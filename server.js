/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/

let express = require('express');
let app = express();
let fs = require('fs');
let path = require('path');
let bodyParser = require('body-parser');

let router = express.Router();
let mongoose = require('./myApp.js').mongoose;
let User = require('./myApp.js').User;
let Exercise = require('./myApp.js').Exercise;
let nameFilter = require('./myApp.js').nameFilter;
let exerciseFilter = require('./myApp.js').exerciseFilter;

let enableCORS = function(req, res, next) {

  if (!process.env.DISABLE_XORIGIN) {
    let allowedOrigins = [
      'https://marsh-glazer.gomix.me',
      'https://narrow-plane.gomix.me',
      'https://www.freecodecamp.com'
    ];
    let origin = req.headers.origin;
    if(!process.env.XORIGIN_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      //console.log(req.method);
      res.set({
        "Access-Control-Allow-Origin" : origin,
        "Access-Control-Allow-Methods" : "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers" : "Origin, X-Requested-With, Content-Type, Accept"
      });
    }
  }
  next();
};

// global setting for safety timeouts to handle possible
// wrong callbacks that will never be called

let timeout = 10000;

app.use(bodyParser.urlencoded({extended: 'false'}));
app.use(bodyParser.json());
app.use(express.static(__dirname + "/public"))
app.use(express.static(__dirname + "/file"))
app.use('/api', enableCORS, router);


app.get('/', function(req, res) {

  res.sendFile(path.join(__dirname, 'views', 'index.html'));
});


app.post("/api/exercise/new-user", (req, res, next) => {

  let name = req.body.username
  User.findOne(nameFilter(name), (err1, data) => {
    if (!err1) {
      if (!data) {
        let model = User(nameFilter(name))
        model.save(function (err2) {
        if (err2)
          next(err2)
        })
        res.json({username: model.username, _id: model._id})
      }
      else {
        res.json({userName: name, message: "user already exists !"})
      }
    }
    else {
      next(err1)
    }
  })
})


app.post("/api/exercise/add", (req, res, next) => {
  
  let filter = exerciseFilter(
    req.body.userId,
    req.body.description,
    req.body.duration,
    req.body.date ? req.body.date : new Date()
  )
  User.findById(filter.userId, (err, user) => {
    if(err) return next(err)
    let model = Exercise(filter)
    model.save(function (err, data) {
      if (err) {
        next(err);
      }
      else {
        user = user.toObject()
        data = data.toObject()
        user.description = data.description
        user.duration = data.duration
        user.date = data.date
        res.json(user)
      }
    })
  })
})


app.get("/api/exercise/users", (req, res, next) => {

  User.find({}, (err, data) => {
    if(err) return next(err)
    res.json(data);
  })
})

app.get("/api/exercise/log/", (req, res, next) => {

  const id          = req.query.userId
  const from        = new Date(req.query.date)
  const to          = new Date(req.query.to)
  const limit       = Number (req.query.limit)
  const selection   = {}
  const projection  = {description:1,  date: 1, duration: 1}
  const restriction = {}
  
  if (id) {
    selection.userId = id
    if (! isNaN(from)) {
      if (! isNaN(to)) {
        selection.date = {$gte: from, $lte: to}
      }
      else {
        selection.date = {$gte: from}
      }
    }
    if (! isNaN(limit)) {
      restriction.limit = limit
    }
  }

  try {
    User.findOne({_id: id}, (err, user) => {
      if (err) {
        next(err)
      }
      else {
        if (user) {
          Exercise.find(selection, projection, restriction, (err, exercises) => {
            if (! err) {
              res.json({
                _id: user._id,
                userName: user.username,
                count: exercises.length,
                log: exercises
              });
            }
            else {
              res.send(err)
            }
          })
        }
        else {
          res.json({error: 'No user found !'})
        }
      }
    })
  }
  catch (e) {
    next(e)
  }
})


app.get('/is-mongoose-ok', function(req, res) {
  console.log("/is-mongoose-ok: ", req.originalUrl);
  if (mongoose) {
    res.json({isMongooseOk: !!mongoose.connection.readyState})
  } else {
    res.json({isMongooseOk: false})
  }
});


app.get('/file/:file', function(req, res, next) {
  let fileName = req.params.file;
  console.log("/file/:file: ", req.originalUrl);
  if(fileName === '.env') { 
    return next({status: 401, message: 'ACCESS DENIED'})
  }
  fs.readFile(path.join(__dirname, fileName), function(err, data){
    if(err) { return next(err) }
    res.type('txt').send(data.toString());
  });
});


// Error handler

app.use(function(err, req, res, next) {
  console.log("Error handler: ", req.originalUrl);
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
});

// Unmatched routes handler

app.use(function(req, res){
  console.log("Unmatched routes handler: ", req.originalUrl);
  if(req.method.toLowerCase() === 'options') {
    res.end();
  } else {
    res.status(404).type('txt').send('Not Found');
  }
})

var listener = app.listen(process.env.PORT || 3000 , function () {
  console.log('Your app is listening on port ' + listener.address().port);
});
